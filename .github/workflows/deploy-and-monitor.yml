name: Deploy and Setup Monitoring

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      # Install dependencies for each component
      - name: Install users-service dependencies
        run: cd services/user-service && npm ci
      
      - name: Install dashboard-api dependencies
        run: cd dashboard-api && npm ci
      
      - name: Install dashboard-ui dependencies
        run: cd dashboard-ui && npm ci
    
  
  detect-apis:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      # Run API detection script
      - name: Detect API endpoints
        run: node scripts/detect-apis.js
        working-directory: services/user-service
      
      # Upload detected APIs as artifact
      - name: Upload detected APIs
        uses: actions/upload-artifact@v3
        with:
          name: detected-apis
          path: services/user-service/detected-apis.json
  
  generate-dashboard:
    runs-on: ubuntu-latest
    needs: detect-apis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      # Download detected APIs artifact
      - name: Download detected APIs
        uses: actions/download-artifact@v3
        with:
          name: detected-apis
          path: .
      
      # Generate dashboard components
      - name: Generate dashboard
        run: node scripts/generate-dashboard.js
      
      # Build the dashboard
      - name: Build dashboard
        run: |
          cd dashboard-ui
          npm ci
          npm run build
      
      # Upload dashboard build as artifact
      - name: Upload dashboard build
        uses: actions/upload-artifact@v3
        with:
          name: dashboard-build
          path: dashboard-ui/build
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, generate-dashboard]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Download dashboard build artifact
      - name: Download dashboard build
        uses: actions/download-artifact@v3
        with:
          name: dashboard-build
          path: dashboard-ui/build
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create project directory if it doesn't exist
            mkdir -p ~/observability-project
            
            # Pull latest code
            cd ~/observability-project
            git pull || git clone ${{ github.repository }} .
            
            # Start monitoring infrastructure
            cd monitoring
            docker-compose up -d
            
            # Wait for services to be ready
            sleep 30
            
            # Deploy dashboard-ui build
            sudo cp -r ${{ github.workspace }}/dashboard-ui/build/* /var/www/html/
            sudo nginx -s reload